[{"name": "app.py", "content": "from htmltools import css\nfrom shiny import App, reactive, render, ui\nfrom shinywidgets import output_widget, reactive_read, register_widget\n\nimport ipyleaflet as L\n\napp_ui = ui.page_fluid(\n    ui.div(\n        ui.input_slider(\"zoom\", \"Map zoom level\", value=12, min=1, max=18),\n        ui.output_ui(\"map_bounds\"),\n        style=css(\n            display=\"flex\", justify_content=\"center\", align_items=\"center\", gap=\"2rem\"\n        ),\n    ),\n    output_widget(\"map\"),\n)\n\n\ndef server(input, output, session):\n    # Initialize and display when the session starts (1)\n    map = L.Map(center=(51.476852, -0.000500), zoom=12, scroll_wheel_zoom=True)\n    # Add a distance scale\n    map.add_control(L.leaflet.ScaleControl(position=\"bottomleft\"))\n    register_widget(\"map\", map)\n\n    # When the slider changes, update the map's zoom attribute (2)\n    @reactive.Effect\n    def _():\n        map.zoom = input.zoom()\n\n    # When zooming directly on the map, update the slider's value (2 and 3)\n    @reactive.Effect\n    def _():\n        ui.update_slider(\"zoom\", value=reactive_read(map, \"zoom\"))\n\n    # Everytime the map's bounds change, update the output message (3)\n    @output\n    @render.ui\n    def map_bounds():\n        center = reactive_read(map, \"center\")\n        if len(center) == 0:\n            return\n\n        lat = round(center[0], 4)\n        lon = (center[1] + 180) % 360 - 180\n        lon = round(lon, 4)\n\n        return ui.p(f\"Latitude: {lat}\", ui.br(), f\"Longitude: {lon}\")\n\n\napp = App(app_ui, server)", "type": "text"}]